<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/duc1607/resolutionchanger/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/duc1607/resolutionchanger/MainActivity.kt" />
              <option name="originalContent" value="package com.duc1607.resolutionchanger&#10;&#10;import android.Manifest&#10;import android.content.Context&#10;import android.content.pm.PackageManager&#10;import android.graphics.Point&#10;import android.os.Bundle&#10;import android.os.IBinder&#10;import android.provider.Settings&#10;import android.util.Log&#10;import android.view.Display&#10;import android.view.WindowManager&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.duc1607.resolutionchanger.ui.theme.ResolutionChangerTheme&#10;import kotlinx.coroutines.launch&#10;import java.lang.reflect.Method&#10;&#10;data class Resolution(&#10;    val width: Int,&#10;    val height: Int,&#10;    val description: String = &quot;&quot;&#10;) {&#10;    override fun toString(): String = &quot;${width}x${height}&quot;&#10;}&#10;&#10;class MainActivity : ComponentActivity() {&#10;&#10;    private fun hasWriteSecureSettingsPermission(): Boolean {&#10;        return checkSelfPermission(Manifest.permission.WRITE_SECURE_SETTINGS) == PackageManager.PERMISSION_GRANTED&#10;    }&#10;&#10;    private fun canWriteSettings(): Boolean {&#10;        return Settings.System.canWrite(this)&#10;    }&#10;&#10;    var windowManagerInterface: Any? = null&#10;        private set&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Log permission status for debugging&#10;        Log.d(&quot;ResolutionChanger&quot;, &quot;WRITE_SECURE_SETTINGS: ${hasWriteSecureSettingsPermission()}&quot;)&#10;        Log.d(&quot;ResolutionChanger&quot;, &quot;Can write settings: ${canWriteSettings()}&quot;)&#10;&#10;        // Initialize IWindowManager using reflection&#10;        initializeWindowManager()&#10;&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            ResolutionChangerTheme {&#10;                MainScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun initializeWindowManager() {&#10;        try {&#10;            // Use reflection to access ServiceManager and IWindowManager&#10;            val serviceManagerClass = Class.forName(&quot;android.os.ServiceManager&quot;)&#10;            val getServiceMethod = serviceManagerClass.getMethod(&quot;getService&quot;, String::class.java)&#10;            val windowManagerBinder =&#10;                getServiceMethod.invoke(null, Context.WINDOW_SERVICE) as IBinder&#10;&#10;            val windowManagerStubClass = Class.forName(&quot;android.view.IWindowManager\$Stub&quot;)&#10;            val asInterfaceMethod =&#10;                windowManagerStubClass.getMethod(&quot;asInterface&quot;, IBinder::class.java)&#10;            windowManagerInterface = asInterfaceMethod.invoke(null, windowManagerBinder)&#10;&#10;            Log.d(&quot;ResolutionChanger&quot;, &quot;IWindowManager initialized successfully using reflection&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ResolutionChanger&quot;, &quot;Failed to initialize IWindowManager: ${e.message}&quot;)&#10;        }&#10;    }&#10;&#10;    fun getCurrentResolution(): Resolution {&#10;        return try {&#10;            val windowManager = getSystemService(Context.WINDOW_SERVICE) as WindowManager&#10;            val display = windowManager.defaultDisplay&#10;            val size = Point()&#10;            display.getRealSize(size)&#10;            Resolution(size.x, size.y)&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ResolutionChanger&quot;, &quot;Failed to get current resolution: ${e.message}&quot;)&#10;            Resolution(1080, 1920) // Default fallback&#10;        }&#10;    }&#10;}&#10;&#10;fun changeResolutionWithIWindowManager(&#10;    windowManager: Any?,&#10;    width: Int,&#10;    height: Int&#10;) {&#10;    if (windowManager == null) {&#10;        return&#10;    }&#10;&#10;    try {&#10;        Log.d(&quot;ResolutionChanger&quot;, &quot;Trying root shell command: wm size ${width}x${height}&quot;)&#10;        val process =&#10;            Runtime.getRuntime().exec(arrayOf(&quot;su&quot;, &quot;-c&quot;, &quot;wm size ${width}x${height}&quot;))&#10;        val exitCode = process.waitFor()&#10;&#10;        val output = process.inputStream.bufferedReader().readText()&#10;        val errorOutput = process.errorStream.bufferedReader().readText()&#10;&#10;        Log.d(&quot;ResolutionChanger&quot;, &quot;Root shell command output: $output&quot;)&#10;        if (errorOutput.isNotEmpty()) {&#10;            Log.d(&quot;ResolutionChanger&quot;, &quot;Root shell command error output: $errorOutput&quot;)&#10;        }&#10;&#10;        if (exitCode == 0) {&#10;            Log.d(&quot;ResolutionChanger&quot;, &quot;Root shell command succeeded&quot;)&#10;        } else {&#10;            Log.w(&quot;ResolutionChanger&quot;, &quot;Root shell command failed with exit code $exitCode&quot;)&#10;        }&#10;    } catch (e: Exception) {&#10;        Log.w(&quot;ResolutionChanger&quot;, &quot;Root shell command failed: ${e.message}&quot;)&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MainScreen() {&#10;    var showDialog by remember { mutableStateOf(false) }&#10;    var resolutions by remember {&#10;        mutableStateOf(&#10;            DefaultResolutions.all&#10;        )&#10;    }&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;    val coroutineScope = rememberCoroutineScope()&#10;    val context = LocalContext.current&#10;&#10;    fun changeResolution(resolution: Resolution) {&#10;        coroutineScope.launch {&#10;            val activity = context as MainActivity&#10;            changeResolutionWithIWindowManager(&#10;                activity.windowManagerInterface,&#10;                resolution.width,&#10;                resolution.height&#10;            )&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        modifier = Modifier.fillMaxSize(),&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&#10;                        text = &quot;Resolution Changer&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;            )&#10;        },&#10;        snackbarHost = { SnackbarHost(snackbarHostState) }&#10;    ) { innerPadding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;                .padding(16.dp)&#10;        ) {&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                items(resolutions) { resolution -&gt;&#10;                    ResolutionItem(&#10;                        resolution = resolution,&#10;                        onClick = { changeResolution(resolution) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        if (showDialog) {&#10;            CreateResolutionDialog(&#10;                onDismiss = { showDialog = false },&#10;                onSave = { resolution -&gt;&#10;                    resolutions = resolutions + resolution&#10;                    showDialog = false&#10;                    coroutineScope.launch {&#10;                        snackbarHostState.showSnackbar(&#10;                            message = &quot;Resolution $resolution added&quot;,&#10;                            actionLabel = &quot;OK&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ResolutionItem(resolution: Resolution, onClick: () -&gt; Unit) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClick() },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = resolution.toString(),&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            if (resolution.description.isNotBlank()) {&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = resolution.description,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CreateResolutionDialog(&#10;    onDismiss: () -&gt; Unit,&#10;    onSave: (Resolution) -&gt; Unit&#10;) {&#10;    var widthText by remember { mutableStateOf(&quot;&quot;) }&#10;    var heightText by remember { mutableStateOf(&quot;&quot;) }&#10;    var widthError by remember { mutableStateOf(false) }&#10;    var heightError by remember { mutableStateOf(false) }&#10;&#10;    fun validateAndSave() {&#10;        val width = widthText.toIntOrNull()&#10;        val height = heightText.toIntOrNull()&#10;&#10;        widthError = width == null || width &lt;= 0&#10;        heightError = height == null || height &lt;= 0&#10;&#10;        if (!widthError &amp;&amp; !heightError &amp;&amp; width != null &amp;&amp; height != null) {&#10;            onSave(Resolution(width, height))&#10;        }&#10;    }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = {&#10;            Text(&#10;                text = &quot;Add Resolution&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        text = {&#10;            Column {&#10;                OutlinedTextField(&#10;                    value = widthText,&#10;                    onValueChange = {&#10;                        widthText = it&#10;                        widthError = false&#10;                    },&#10;                    label = { Text(&quot;Width&quot;) },&#10;                    placeholder = { Text(&quot;e.g. 1920&quot;) },&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),&#10;                    isError = widthError,&#10;                    supportingText = if (widthError) {&#10;                        { Text(&quot;Width must be greater than 0&quot;) }&#10;                    } else null,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                OutlinedTextField(&#10;                    value = heightText,&#10;                    onValueChange = {&#10;                        heightText = it&#10;                        heightError = false&#10;                    },&#10;                    label = { Text(&quot;Height&quot;) },&#10;                    placeholder = { Text(&quot;e.g. 1080&quot;) },&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),&#10;                    isError = heightError,&#10;                    supportingText = if (heightError) {&#10;                        { Text(&quot;Height must be greater than 0&quot;) }&#10;                    } else null,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        },&#10;        confirmButton = {&#10;            TextButton(onClick = { validateAndSave() }) {&#10;                Text(&quot;Save&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun MainScreenPreview() {&#10;    ResolutionChangerTheme {&#10;        MainScreen()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.duc1607.resolutionchanger&#10;&#10;import android.Manifest&#10;import android.content.Context&#10;import android.content.pm.PackageManager&#10;import android.graphics.Point&#10;import android.os.Bundle&#10;import android.os.IBinder&#10;import android.provider.Settings&#10;import android.util.Log&#10;import android.view.Display&#10;import android.view.WindowManager&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.duc1607.resolutionchanger.ui.theme.ResolutionChangerTheme&#10;import kotlinx.coroutines.launch&#10;import java.lang.reflect.Method&#10;&#10;data class Resolution(&#10;    val width: Int,&#10;    val height: Int,&#10;    val description: String = &quot;&quot;&#10;) {&#10;    override fun toString(): String = &quot;${width}x${height}&quot;&#10;}&#10;&#10;class MainActivity : ComponentActivity() {&#10;&#10;    private fun hasWriteSecureSettingsPermission(): Boolean {&#10;        return checkSelfPermission(Manifest.permission.WRITE_SECURE_SETTINGS) == PackageManager.PERMISSION_GRANTED&#10;    }&#10;&#10;    private fun canWriteSettings(): Boolean {&#10;        return Settings.System.canWrite(this)&#10;    }&#10;&#10;    var windowManagerInterface: Any? = null&#10;        private set&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Log permission status for debugging&#10;        Log.d(&quot;ResolutionChanger&quot;, &quot;WRITE_SECURE_SETTINGS: ${hasWriteSecureSettingsPermission()}&quot;)&#10;        Log.d(&quot;ResolutionChanger&quot;, &quot;Can write settings: ${canWriteSettings()}&quot;)&#10;&#10;        // Initialize IWindowManager using reflection&#10;        initializeWindowManager()&#10;&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            ResolutionChangerTheme {&#10;                MainScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun initializeWindowManager() {&#10;        try {&#10;            // Use reflection to access ServiceManager and IWindowManager&#10;            val serviceManagerClass = Class.forName(&quot;android.os.ServiceManager&quot;)&#10;            val getServiceMethod = serviceManagerClass.getMethod(&quot;getService&quot;, String::class.java)&#10;            val windowManagerBinder =&#10;                getServiceMethod.invoke(null, Context.WINDOW_SERVICE) as IBinder&#10;&#10;            val windowManagerStubClass = Class.forName(&quot;android.view.IWindowManager\$Stub&quot;)&#10;            val asInterfaceMethod =&#10;                windowManagerStubClass.getMethod(&quot;asInterface&quot;, IBinder::class.java)&#10;            windowManagerInterface = asInterfaceMethod.invoke(null, windowManagerBinder)&#10;&#10;            Log.d(&quot;ResolutionChanger&quot;, &quot;IWindowManager initialized successfully using reflection&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ResolutionChanger&quot;, &quot;Failed to initialize IWindowManager: ${e.message}&quot;)&#10;        }&#10;    }&#10;&#10;    fun getCurrentResolution(): Resolution {&#10;        return try {&#10;            val windowManager = getSystemService(Context.WINDOW_SERVICE) as WindowManager&#10;            val display = windowManager.defaultDisplay&#10;            val size = Point()&#10;            display.getRealSize(size)&#10;            Resolution(size.x, size.y)&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;ResolutionChanger&quot;, &quot;Failed to get current resolution: ${e.message}&quot;)&#10;            Resolution(1080, 1920) // Default fallback&#10;        }&#10;    }&#10;}&#10;&#10;fun changeResolutionWithIWindowManager(&#10;    windowManager: Any?,&#10;    width: Int,&#10;    height: Int&#10;) {&#10;    if (windowManager == null) {&#10;        return&#10;    }&#10;&#10;    try {&#10;        Log.d(&quot;ResolutionChanger&quot;, &quot;Trying root shell command: wm size ${width}x${height}&quot;)&#10;        val process =&#10;            Runtime.getRuntime().exec(arrayOf(&quot;su&quot;, &quot;-c&quot;, &quot;wm size ${width}x${height}&quot;))&#10;        val exitCode = process.waitFor()&#10;&#10;        val output = process.inputStream.bufferedReader().readText()&#10;        val errorOutput = process.errorStream.bufferedReader().readText()&#10;&#10;        Log.d(&quot;ResolutionChanger&quot;, &quot;Root shell command output: $output&quot;)&#10;        if (errorOutput.isNotEmpty()) {&#10;            Log.d(&quot;ResolutionChanger&quot;, &quot;Root shell command error output: $errorOutput&quot;)&#10;        }&#10;&#10;        if (exitCode == 0) {&#10;            Log.d(&quot;ResolutionChanger&quot;, &quot;Root shell command succeeded&quot;)&#10;        } else {&#10;            Log.w(&quot;ResolutionChanger&quot;, &quot;Root shell command failed with exit code $exitCode&quot;)&#10;        }&#10;    } catch (e: Exception) {&#10;        Log.w(&quot;ResolutionChanger&quot;, &quot;Root shell command failed: ${e.message}&quot;)&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MainScreen() {&#10;    var showDialog by remember { mutableStateOf(false) }&#10;    var resolutions by remember {&#10;        mutableStateOf(&#10;            DefaultResolutions.all&#10;        )&#10;    }&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;    val coroutineScope = rememberCoroutineScope()&#10;    val context = LocalContext.current&#10;&#10;    fun changeResolution(resolution: Resolution) {&#10;        coroutineScope.launch {&#10;            val activity = context as MainActivity&#10;            changeResolutionWithIWindowManager(&#10;                activity.windowManagerInterface,&#10;                resolution.width,&#10;                resolution.height&#10;            )&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        modifier = Modifier.fillMaxSize(),&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&#10;                        text = &quot;Resolution Changer&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;            )&#10;        },&#10;        snackbarHost = { SnackbarHost(snackbarHostState) }&#10;    ) { innerPadding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;                .padding(16.dp)&#10;        ) {&#10;            LazyColumn(&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .fillMaxWidth(),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                items(resolutions) { resolution -&gt;&#10;                    ResolutionItem(&#10;                        resolution = resolution,&#10;                        onClick = { changeResolution(resolution) }&#10;                    )&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Made with ❤️ by duc1607&quot;,&#10;                modifier = Modifier.fillMaxWidth(),&#10;                textAlign = androidx.compose.ui.text.style.TextAlign.Center,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;&#10;        if (showDialog) {&#10;            CreateResolutionDialog(&#10;                onDismiss = { showDialog = false },&#10;                onSave = { resolution -&gt;&#10;                    resolutions = resolutions + resolution&#10;                    showDialog = false&#10;                    coroutineScope.launch {&#10;                        snackbarHostState.showSnackbar(&#10;                            message = &quot;Resolution $resolution added&quot;,&#10;                            actionLabel = &quot;OK&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ResolutionItem(resolution: Resolution, onClick: () -&gt; Unit) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClick() },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = resolution.toString(),&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            if (resolution.description.isNotBlank()) {&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = resolution.description,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CreateResolutionDialog(&#10;    onDismiss: () -&gt; Unit,&#10;    onSave: (Resolution) -&gt; Unit&#10;) {&#10;    var widthText by remember { mutableStateOf(&quot;&quot;) }&#10;    var heightText by remember { mutableStateOf(&quot;&quot;) }&#10;    var widthError by remember { mutableStateOf(false) }&#10;    var heightError by remember { mutableStateOf(false) }&#10;&#10;    fun validateAndSave() {&#10;        val width = widthText.toIntOrNull()&#10;        val height = heightText.toIntOrNull()&#10;&#10;        widthError = width == null || width &lt;= 0&#10;        heightError = height == null || height &lt;= 0&#10;&#10;        if (!widthError &amp;&amp; !heightError &amp;&amp; width != null &amp;&amp; height != null) {&#10;            onSave(Resolution(width, height))&#10;        }&#10;    }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = {&#10;            Text(&#10;                text = &quot;Add Resolution&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        text = {&#10;            Column {&#10;                OutlinedTextField(&#10;                    value = widthText,&#10;                    onValueChange = {&#10;                        widthText = it&#10;                        widthError = false&#10;                    },&#10;                    label = { Text(&quot;Width&quot;) },&#10;                    placeholder = { Text(&quot;e.g. 1920&quot;) },&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),&#10;                    isError = widthError,&#10;                    supportingText = if (widthError) {&#10;                        { Text(&quot;Width must be greater than 0&quot;) }&#10;                    } else null,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                OutlinedTextField(&#10;                    value = heightText,&#10;                    onValueChange = {&#10;                        heightText = it&#10;                        heightError = false&#10;                    },&#10;                    label = { Text(&quot;Height&quot;) },&#10;                    placeholder = { Text(&quot;e.g. 1080&quot;) },&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),&#10;                    isError = heightError,&#10;                    supportingText = if (heightError) {&#10;                        { Text(&quot;Height must be greater than 0&quot;) }&#10;                    } else null,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        },&#10;        confirmButton = {&#10;            TextButton(onClick = { validateAndSave() }) {&#10;                Text(&quot;Save&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun MainScreenPreview() {&#10;    ResolutionChangerTheme {&#10;        MainScreen()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>